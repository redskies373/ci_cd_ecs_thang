on:
  push:
    branch:
      - master
    tags:
      - "production/**"

name: Deploy Hello World

jobs:
  start-runner-and-deploy:
    name: Start self-hosted EC2 runner and deploy to production
    runs-on: ubuntu-latest
    environment: production
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-09d48adfe35882a23
          ec2-instance-type: t3.nano
          subnet-id: ${{ secrets.GHA_RUNNER_SUBNET }}
          security-group-id: ${{ secrets.GHA_RUNNER_SG }}
          iam-role-name: gha_runner_role        
      - name: Checkout
        uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1    
      - name: Login to Amazon ECR
        id: login-ecr
        #uses: aws-actions/amazon-ecr-login@v1
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 966510751703.dkr.ecr.us-east-1.amazonaws.com
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          #ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY: 966510751703.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: github-actions
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build . -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"         
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: github-actions
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: github-actions-service
          cluster: github-actions-cluster
          wait-for-service-stability: true

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner-and-deploy
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner-and-deploy.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner-and-deploy.outputs.ec2-instance-id }}
